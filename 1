import numpy as np

def f(x):
    return np.exp(x) * np.sin(4*x)

def composite_trapezoidal(a, b, h):
    n = int((b - a) / h)
    x = np.linspace(a, b, n + 1)
    y = f(x)
    return (h / 2) * (y[0] + 2 * np.sum(y[1:n]) + y[n])

def composite_simpson(a, b, h):
    n = int((b - a) / h)
    if n % 2 == 1:
        n += 1  # Simpson's rule requires an even number of intervals
    x = np.linspace(a, b, n + 1)
    y = f(x)
    return (h / 3) * (y[0] + 4 * np.sum(y[1:n:2]) + 2 * np.sum(y[2:n-1:2]) + y[n])

def composite_midpoint(a, b, h):
    n = int((b - a) / h)
    midpoints = np.linspace(a + h/2, b - h/2, n)
    return h * np.sum(f(midpoints))

# 設定區間與步長
a, b, h = 1, 2, 0.1

# 計算積分值
I_trap = composite_trapezoidal(a, b, h)
I_simp = composite_simpson(a, b, h)
I_mid = composite_midpoint(a, b, h)

print(f"Composite Trapezoidal Rule: {I_trap:.6f}")
print(f"Composite Simpson's Rule: {I_simp:.6f}")
print(f"Composite Midpoint Rule: {I_mid:.6f}")
