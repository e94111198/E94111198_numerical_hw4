import numpy as np
from scipy.integrate import quad
from numpy.polynomial.legendre import leggauss

# 被積函數
def f(x, y):
    return 2 * y * np.sin(x) + np.cos(x)**2

# 積分上下限
def y_lower(x):
    return np.sin(x)

def y_upper(x):
    return np.cos(x)

x0, x1 = 0, np.pi / 4

# (a) Simpson's Rule 實作
def simpsons_double(f, x0, x1, nx, ny):
    x = np.linspace(x0, x1, nx + 1)
    hx = (x1 - x0) / nx

    total = 0
    for i in range(nx + 1):
        xi = x[i]
        y0 = y_lower(xi)
        y1 = y_upper(xi)
        y = np.linspace(y0, y1, ny + 1)
        hy = (y1 - y0) / ny

        coeff_x = 1
        if i % 2 == 1:
            coeff_x = 4
        elif i != 0 and i != nx:
            coeff_x = 2

        inner_total = 0
        for j in range(ny + 1):
            coeff_y = 1
            if j % 2 == 1:
                coeff_y = 4
            elif j != 0 and j != ny:
                coeff_y = 2
            inner_total += coeff_y * f(xi, y[j])
        total += coeff_x * inner_total * hy / 3

    return total * hx / 3

# (b) Gaussian Quadrature 實作
def gaussian_quad_2d(f, x0, x1, nx, ny):
    x_nodes, x_weights = leggauss(nx)
    y_nodes, y_weights = leggauss(ny)

    def map_to_interval(a, b, t):
        return 0.5 * (b - a) * t + 0.5 * (b + a)

    integral = 0
    for i in range(nx):
        xi = map_to_interval(x0, x1, x_nodes[i])
        wi = x_weights[i]
        yl = y_lower(xi)
        yu = y_upper(xi)
        for j in range(ny):
            yj = map_to_interval(yl, yu, y_nodes[j])
            wj = y_weights[j]
            integral += wi * wj * f(xi, yj) * (yu - yl) / 2

    return integral * (x1 - x0) / 2

# (c) 正確 exact value（手動內積分後再積分一次）
def exact_integrand(x):
    return np.sin(x) * (np.cos(x)**2 - np.sin(x)**2) + np.cos(x)**2 * (np.cos(x) - np.sin(x))

exact_value, _ = quad(exact_integrand, x0, x1)

# 計算近似結果
simpson_result = simpsons_double(f, x0, x1, 4, 4)
gauss_result = gaussian_quad_2d(f, x0, x1, 3, 3)

# 輸出結果與誤差比較
print(f"Simpson's Rule     (n=4, m=4): {simpson_result:.8f}")
print(f"Gaussian Quadrature (n=3, m=3): {gauss_result:.8f}")
print(f"Exact Value                   : {exact_value:.8f}")
print()
print(f"Simpson 誤差: {abs(simpson_result - exact_value):.2e}")
print(f"Gaussian 誤差: {abs(gauss_result - exact_value):.2e}")
