import numpy as np
import scipy.integrate as spi

def simpsons_rule(f, a, b, n):
    if n % 2 == 1:
        raise ValueError("n must be even for Simpson's rule")
    
    h = (b - a) / n
    x = np.linspace(a, b, n + 1)
    y = f(x)
    
    integral = (h / 3) * (y[0] + 4 * sum(y[1:n:2]) + 2 * sum(y[2:n-1:2]) + y[n])
    return integral

def f1(x):
    return x**(-1/4) * np.sin(x)

def f2(x):
    return x**(-4) * np.sin(x)

def transformed_f1(t):
    x = 1/t
    return (x**(-1/4) * np.sin(x)) * (1/t**2)

def transformed_f2(t):
    x = 1/t
    return (x**(-4) * np.sin(x)) * (1/t**2)

# Integral a: transform x = 1/t, so limits become [1, infinity] -> [1, 0]
n = 4
I1 = simpsons_rule(transformed_f1, 1, 100, n)  # Approximating infinity with 100
I2 = simpsons_rule(transformed_f2, 0.01, 1, n)  # Approximating 0 with 0.01

print(f"Approximate integral for (a): {I1}")
print(f"Approximate integral for (b): {I2}")
